name: CI

on:
  push:
    branches: [ main, testing ]
  pull_request:
    branches: [ main, testing ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      shell: bash
      run: |
        uv venv
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        uv pip install poetry
        poetry install

    - name: Run pre-commit hooks
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        poetry run pre-commit run --all-files
      env:
        SKIP: no-commit-to-branch

    - name: Run type checking
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        poetry run mypy spec_cli/

    - name: Run tests with coverage
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        poetry run pytest tests/unit/ -v --cov=spec_cli --cov-report=xml --cov-report=term-missing --cov-fail-under=80

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install poetry
        poetry install

    - name: Run ruff check
      run: |
        source .venv/bin/activate
        poetry run ruff check .

    - name: Run ruff format check
      run: |
        source .venv/bin/activate
        poetry run ruff format --check .

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install poetry
        poetry install

    - name: Run Bandit Security Linter
      run: |
        source .venv/bin/activate
        poetry run pip install bandit[toml]
        poetry run bandit -r spec_cli/ -f json -o bandit-report.json || true
        poetry run bandit -r spec_cli/ -ll

    - name: Upload Bandit Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
